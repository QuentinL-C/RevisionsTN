la pagination 
utilise des partitions fixes -> ou
utilise des partitions varaibales -> non
*impose une allocation  contigue en mémoire -> non
*limite la fragmentation externe ->  non (elle enlve totalement)
*limite la fragmentation interne -> oui
*permer la mise en place la protection inter processus mais pas le partage -> Non

la segmentation
*utilise des partions fixes -> non variables
*permete d'avoir une vision utilisateur de la mémoire -> oui
*permett une réalisation efficacve d'une "mémoire virtuelle" -> non 
*peut produire de la fragmentation interne -> non


Concernantr les  algos de remplacement de pages: 
*FIFO est le plus simple -> oui
*LRU souffre de l'anomalie de Belady -> Non
*l'algo de la seconde chance est le plus optimal -> non ( algo optimal )
*l'algorithme du bit de référence est une approximation de LRU -> oui

Vrai ou faux
*une addresse logique est générée par l'UC -> V
*une adressee physique est calculée par le processeur -> F
*la liaison dynamique consiste en la traduction d'adresses au moment de l'édition des liens ->  F
*la liaison dynamique permet l'obtention d'un programme traénslatable mais nin relogeable -> Non ( les deux sont obtenus

la taille d'une page dans le x86 peut être 
*4 Ko ou 4 Mo

Dans le X86  version 32 bits
*une adresse logique est codée sur 32 bits -> Non
*une adresse linéaire est codée sur 32 bits -> Oui
*une adresse physique est codée sur 32 bits -> Oui


Linux par rapport à la segmentation x86
*n'utilise pas du tout les segments car il adopte une pagination à 3 niveaux généralisée à toutes les architectures -> pagination à 3 niveaux mais utilise la segmentation 
*utilise a segmentation d'une façon limitée -> V
*utilise la segmentation pour différencier les segments noyau et utilisateur -> V


le nb de threads par proc Linux est 
* donné par cat/proc/sys/kernel/threads-max
* limité par la taille de la mémoire physique disponible
* un seul

Soit un extrait de la sortie commande  `cat/proc/self/maps`

08048000-0804c000 r-xp 00000000 03:07 293186 /bin/cat
08048000-0804d000 rw-p 00003000 03:07 293186 /bin/cat
.
.
.
bfffe000-c0000000 rwxp fffff000 00:00 0


la premiere région consiste en le code du processus cat qui se situe à l'offset 0 de l'éxécutable /bin/cat -> oui
la région de données de tous les processus Linux commence à l'adresse 0x0804c000 -> Vrai car adresse logique
la pile utilisateur du processus fait 3000 octets -> faux 2000
l'adresse 0xc0000000 correspond à la limite de l'espace utilisateur du processus -> Oui



Trouver et corriger les erreurs . On suppose que la déclaration thread_union est correction

THREAD_UNION
union thread_union {
struct thread_info thread_info;
unsigned long stack[1024];
}

CURRENT_THREAD_INFO
mov1  $0xffffe000, %ecx
and1 %esp, %ecx
mov1  %ecx,p

CURRENT

mov1  $0xffffe000, %ecx
and1 %esp, %ecx
mov1  (%ecx),p


la taille de thread_info est 1Ko -> F (58Ko)
la pile fait 2Ko -> F ( 4ko 1024*4)
la thread_union fait 2Ko -> F (4Ko max entre thread info et thread union)

pourquoi le thread_info et la pile sont regfroupées dansla même structure ?
La thread_union peut faire seulement 4Ko au lieu de 8 Ko. Quel en est l'intérêt ?
